package convert

import _ "fmt"

// 二进制转化十进制原理方法:
// 从最右侧低位开始，计算位上的值 * 2 的（位数 - 1）次方，最后求和
// 例如: 110001100 ==> 0*2^0 + 0*2^1 + 1*2^2 + 1*2^3 + 0*2^4 + 0*2^5 + 0*2^6 + 1*2^7 + 1*2^8 = 4 + 8 + 128 + 256  = 396
func Convertb2d() {

}

// 八进制转化十进制原理方法:
// 从最右侧低位开始，计算位上的值 * 8 的（位数 - 1）次方，最后求和
// 例如: 02456 ==> 6*8^0 + 5*8^1 + 4*8^2 + 2*8^3 = 6 + 40 + 256 + 1024  = 1326
func Converto2d() {

}

// 十六进制转化十进制原理方法:
// 从最右侧低位开始，计算位上的值 * 16 的（位数 - 1）次方，最后求和
// 例如: 0xA45 ==> 5*16^0 + 4*16^1 + 10*16^2 = 5 + 64 + 2560  = 2629
func Convertx2d() {

}

// 十进制转化二进制原理方法:
// 将该数不断除以 2 ，直到商为 0 ，将所有的余数倒过来，就是对应的二进制数
// 例如: 123 ==> 123/2=61 123%2=1,61/2=30 61%2=1,30/2=15 30%2=0,15/2=7 15%2=1,7/2=3 7%2=1,3/2=1 3%2=1,1/2=0 1%2=1
// =余数倒置=> 1111011
func Convertd2b() {

}

// 十进制转化八进制原理方法:
// 将该数不断除以 8 ，直到商为 0 ，将所有的余数倒过来，就是对应的二进制数
// 例如: 678 ==> 678/8=84 678%8=(6),84/8=10 84%8=(4),10/8=1 10%8=(2),1/8=0 1%8=(1)
// =余数倒置=> 01246
func Convertd2o() {

}

// 十进制转化十六进制原理方法:
// 将该数不断除以 16 ，直到商为 0 ，将所有的余数倒过来，就是对应的二进制数
// 例如: 8912 ==> 8912/16=557 8912%16=(0),557/16=34 557%16=(13 D),34/16=2 34%16=(2),2/16=0 2%16=(2)
// =余数倒置=> 0x22D0
func Convertd2x() {

}

// 二进制转化八进制原理方法：
// 将二进制数每三个一组（从低位到高位）分组，分别计算对应的值并组合起来
// 例如: 11100101 ==> 11 100 101 ==> 0345
func Covertb2o() {

}

// 二进制转化十六进制原理方法：
// 将二进制数每四个一组（从低位到高位）分组，分别计算对应的值并组合起来
// 例如: 1110010110 ==> 11 1001 0110 ==> 0x396
func Covertb2x() {

}

// 八进制转化二进制原理方法：
// 将八进制数的每一位，转化为一个3位的二进制数拼接即可
// 例如: 0247 ==> 10 100 111 ==> 10100111
func Converto2b() {

}

// 十六进制转化二进制原理方法：
// 将十六进制数的每一位，转化为一个4位的二进制数拼接即可
// 例如: 0x247 ==> 10 0100 0111 ==> 1001000111
func Convertx2b() {

}
