package main

import "fmt"

func main() {

	// 位运算基础知识：
	// 原码 反码 补码，对于有符号的整数而言：
	// 1. 二进制的最高位代表符号，0代表正数，1代表负数
	// 2. 正数的 原码 反码 补码 都一样
	// 3. 负数的反码等于：符号位不变，其他位取反（0 -> 1, 1 -> 0）
	// 4. 负数的补码 = 反码 + 1
	// 5. 0 的反码 补码 都是0
	// 6. 计算机运算的时候，都以补码的方式运算
	// 7. 已知负数补码，求原码:符号位不变，取反加一
	//
	//  1: 原码 【0000 0001】 反码 【0000 0001】 补码 【0000 0001】
	// -1: 原码 【1000 0001】 反码 【1111 1110】 补码 【1111 1111】

	// 各种位运算：
	// 按位与 2&3 位对应判断，同为1时结果为1，否则为0
	// 2 补码 0000 0010
	// 3 补码 0000 0011
	// 2&3   0000 0010 ==> 2
	fmt.Println("2&3=", 2&3)

	// 按位或 2|3 位对应判断，两个中有一个为1时结果为1，否则为0
	// 2 补码 0000 0010
	// 3 补码 0000 0011
	// 2|3   0000 0011 ==> 3
	fmt.Println("2|3=", 2|3)

	// 按位异或 2^3 位对应判断，两个中有一个为1,另一个为0时，结果为1，否则为0
	// 2 补码 0000 0010
	// 3 补码 0000 0011
	// 2^3   0000 0001 ==> 1
	fmt.Println("2^3=", 2^3)

	// 有负数参与运算时，要转化为补码进行运算，所得的结果，也是补码，要转换成原码后转换十进制返回
	// 例如: -3^4
	// -3 原码 1000 0011
	// -3 反码 1111 1100
	// -3 补码 1111 1101
	//  4 补码 0000 0100
	// -3^4   1111 1001 =转反码:符号位不变，取反加一=> 10000111 ==> -7
	fmt.Println("-3^4=", -3^4)

}
